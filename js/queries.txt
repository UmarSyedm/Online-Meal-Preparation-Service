CREATE TABLE FOODS_KMEANS
AS SELECT ID, CALORIES, CARBS, PROTEIN, FAT, SUGAR, FIBER, SODIUM FROM FOODS;

SELECT * FROM FOODS;

SELECT TITLE || ' - (' || MEAL_TYPE || ')' AS TITLE, CARBS, PROTEIN, FAT FROM FOODS ORDER BY ID;

SELECT TITLE, CALORIES, CAL_CALORIES, CALORIES-CAL_CALORIES FROM (
select TITLE, CALORIES, carbs * 4 + protein * 4 + fat * 9 AS 'CAL_CALORIES' FROM FOODS);


delete from bd_meals;

____________________________________________________________________________________________________________


--CHART 1 Meals with Highest User Rating
SELECT TITLE, USER_RATING, USER_RATING_COUNT FROM FOODS ORDER BY USER_RATING DESC, USER_RATING_COUNT DESC LIMIT 10;

--CHART 2 Highest Ordered Meals
SELECT TITLE, COUNT(*) AS COUNT FROM ORDERS GROUP BY TITLE ORDER BY COUNT DESC LIMIT 10;

--CHART 3 Users with Highest Orders
SELECT USER_NAME, COUNT(*) AS COUNT FROM ORDERS WHERE PAYMENT_STATUS = 'PAID' GROUP BY TITLE ORDER BY COUNT DESC LIMIT 5;

--CHART 4 Locations which Generate Highest Revenue
SELECT ADDRESS, SUM(DISCOUNT_COST) AS REVENUE FROM ORDERS WHERE PAYMENT_STATUS = 'PAID' GROUP BY ADDRESS ORDER BY REVENUE DESC;

--CHART 5 Users who Spent Most
SELECT USER_NAME, ROUND(SUM(DISCOUNT_COST), 2) AS REVENUE FROM ORDERS WHERE PAYMENT_STATUS = 'PAID' GROUP BY USER_NAME ORDER BY REVENUE DESC LIMIT 5;

SELECT ADDRESS, ROUND(SUM(DISCOUNT_COST), 0) AS REVENUE FROM ORDERS WHERE PAYMENT_STATUS = 'PAID' GROUP BY ADDRESS ORDER BY REVENUE DESC LIMIT 5;

SELECT * FROM MEAL_CLUSTERS ORDER BY ID;

SELECT ID, TITLE, CARBS, PROTEIN, FAT FROM FOODS WHERE MEAL_TYPE = 'BF' AND TITLE NOT IN (SELECT TITLE FROM BD_MEALS WHERE );

CREATE TABLE FOODS_TEST AS SELECT * FROM FOODS;

CREATE TABLE FOODS_FAKE AS SELECT * FROM FOODS WHERE ID = -1;

CREATE TABLE FOODS_FAKE AS SELECT * FROM FOODS WHERE 1 = 2;

SELECT CALORIES, CARBS, PROTEIN, FAT FROM FOODS;

UPDATE FOODS SET CALORIES = (CARBS*4)+(PROTEIN*4)+(FAT*9);

_____________________________________________________________________________________________________________


SELECT ID, USER_NAME, TITLE, MEAL_TYPE, DAY FROM BD_MEALS WHERE USER_NAME = 'vitfour';

SELECT TITLE, COST1 FROM FOODS;

SELECT USER_NAME, ADDRESS FROM USER_INFO;

SELECT ID, BD_MEALS.USER_NAME, BD_MEALS.TITLE, MEAL_TYPE, DAY, COST1, ADDRESS
FROM BD_MEALS, FOODS, USER_INFO
WHERE BD_MEALS.USER_NAME = 'vitfour' AND BD_MEALS.TITLE = FOODS.TITLE AND BD_MEALS.USER_NAME = USER_INFO.USER_NAME;

SELECT ID, A.USER_NAME, A.TITLE, MEAL_TYPE, DAY, COST1, ADDRESS
FROM BD_MEALS A, FOODS B, USER_INFO C
WHERE A.USER_NAME = 'vitfour' AND A.TITLE = B.TITLE AND A.USER_NAME = C.USER_NAME;

SELECT ID, A.USER_NAME, A.TITLE, MEAL_TYPE, DAY, COST1, ADDRESS
FROM BD_MEALS A INNER JOIN FOODS B INNER JOIN USER_INFO C
WHERE A.USER_NAME = 'vitfour' AND A.TITLE = B.TITLE AND A.USER_NAME = C.USER_NAME;

SELECT * FROM (SELECT ID, A.USER_NAME, A.TITLE, MEAL_TYPE, DAY, COST1, ADDRESS
FROM BD_MEALS A JOIN FOODS B ON A.TITLE = B.TITLE JOIN USER_INFO C ON A.USER_NAME = C.USER_NAME);

SELECT TITLE, MEAL_TYPE, ORDER_DATE, ADDRESS, DELIVERY_DATE 
                        FROM ORDERS WHERE USER_NAME = 'adminn' AND DELIVERY_DATE > DATETIME()
                        AND PAYMENT_STATUS = 'PAID'
                        UNION ALL
                        SELECT TITLE, MEAL_TYPE, ORDER_DATE, ADDRESS, DELIVERY_DATE 
                        FROM BD_ORDERS WHERE USER_NAME = 'adminn' AND DELIVERY_DATE > DATETIME()
                        AND PAYMENT_STATUS = 'PAID'
                        ORDER BY DELIVERY_DATE;
                        
SELECT TITLE FROM FOODS WHERE MEAL_TYPE = 'BF' ORDER BY TITLE;

SELECT TITLE, CARBS, PROTEIN, FAT FROM FOODS WHERE MEAL_TYPE = 'BF';

SELECT TITLE, CARBS, PROTEIN, FAT FROM FOODS WHERE TITLE = 'Bhaji with Puri';

UPDATE USER_INFO SET TARGET_CAL = ((10 * WEIGHT) + (6.25 * HEIGHT) + (5 * ((strftime('%Y', 'now')) - YOB)));

SELECT HEIGHT, WEIGHT, (strftime('%Y', 'now')) - YOB AS AGE FROM USER_INFO;

SELECT USER_NAME, TITLE, MEAL_TYPE, ORDER_DATE, ADDRESS, DELIVERY_DATE, PAYMENT_STATUS 
FROM ORDERS WHERE DELIVERY_DATE > DATETIME()
UNION ALL
SELECT USER_NAME, TITLE, MEAL_TYPE, ORDER_DATE, ADDRESS, DELIVERY_DATE, PAYMENT_STATUS 
FROM BD_ORDERS WHERE DELIVERY_DATE > DATETIME() ORDER BY DELIVERY_DATE;
    
SELECT USER_NAME, ADDRESS, COUNT(*) FROM ORDERS GROUP BY ADDRESS;

SELECT USER_NAME, ADDRESS FROM USER_INFO;

SELECT DISTINCT(A.USER_NAME), A.ADDRESS, B.USER_NAME, B.ADDRESS FROM ORDERS A, USER_INFO B WHERE A.USER_NAME = B.USER_NAME;

SELECT DISTINCT(USER_NAME) FROM ORDERS WHERE USER_NAME NOT IN (SELECT USER_NAME FROM USER_INFO);

UPDATE ORDERS SET ADDRESS = 'Vellore' WHERE USER_NAME = 'vitfour';

DELETE FROM ORDERS WHERE USER_NAME = 'yusuf';

SELECT TITLE, MEAL_TYPE, USER_RATING, ML_RATING, ROUND(ABS(USER_RATING - ML_RATING), 2) AS VARIANCE FROM FOODS WHERE ML_RATING IS NOT '-1';

SELECT TITLE FROM FOODS WHERE MEAL_TYPE = 'LN' AND MEAL_PREF = 
                                        (SELECT MEAL_PREF FROM USER_INFO WHERE USER_NAME = 'vitone') ORDER BY TITLE;
                                        
SELECT MEAL_TYPE, COUNT(*) FROM FOODS GROUP BY MEAL_TYPE;

SELECT MEAL_TYPE, COUNT(*) FROM FOODS WHERE MEAL_PREF = 'VEG' GROUP BY MEAL_TYPE;

SELECT MEAL_TYPE, COUNT(*) FROM FOODS WHERE MEAL_PREF = 'NONVEG' GROUP BY MEAL_TYPE ORDER BY MEAL_TYPE;

SELECT  COUNT(*) FROM FOODS WHERE MEAL_TYPE = 'DN' AND MEAL_PREF = 'VEG';

SELECT DISTINCT(MEAL_TYPE) FROM FOODS ORDER BY MEAL_TYPE;

SELECT MEAL_TYPE FROM FOODS WHERE MEAL_PREF = 'NONVEG';

